{"version":3,"sources":["markup/static/stylus/common.styl","main.css","markup/static/stylus/mixins.styl","markup/components/gallery/gallery.styl","markup/components/header/header.styl","node_modules/rupture/rupture/index.styl","markup/components/logo/logo.styl","markup/components/main-screen/main-screen.styl","markup/components/modals/about-material.styl","markup/components/service/service.styl"],"names":[],"mappings":"AAGA;EACE,0CAAA;EAAA,kCAAA;CCFD;ADID;EACE,iBAAA;EACA,mBAAA;CCFD;ADIC;EEkBA,mBAAA;EACA,OAAA;EACA,QAAA;EACA,SAAA;EACA,UAAA;EACA,aAAA;EACA,qBAAA;KAAA,kBAAA;EACA,iCAAA;EACA,SAAA;EACA,gBAAA;EACA,iBAAA;CDnBD;ADND;EACE,kCAAA;EACA,gBAAA;CCQD;ADND;EACE,gBAAA;EACA,eAAA;EACA,8BAAA;CCQD;ADND;;;EACE,4CAAA;CCUD;ADPC;EACE,iBAAA;EACA,kBAAA;EACA,mBAAA;CCSH;ADLC;EACE,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,0BAAA;MAAA,uBAAA;UAAA,oBAAA;CCOH;ADLD;EACE,iBAAA;EACA,kBAAA;EACA,uBAAA;KAAA,oBAAA;CCOD;AE/CD;EACE,aAAA;CFiDD;AGlDD;EACE,kCAAA;CHoDD;AGlDC;EACE,UAAA;EACA,cAAA;EACA,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,0BAAA;MAAA,uBAAA;UAAA,oBAAA;EACA,0BAAA;MAAA,uBAAA;UAAA,+BAAA;CHoDH;AGlDG;EACE,aAAA;EACA,qBAAA;CHoDL;AGlDG;EACE,0BAAA;CHoDL;AI4EU;EAAA;ID7HL,aAAA;GHqDH;CACF;AIuEU;EAAA;ID1HL,mBAAA;IACA,oBAAA;GHuDH;CACF;AK9ED;EACE,aAAA;EACA,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,0BAAA;MAAA,uBAAA;UAAA,oBAAA;EACA,8BAAA;EACA,eAAA;EACA,gBAAA;CLgFD;AK9EC;EACE,gBAAA;EACA,iBAAA;EACA,mBAAA;CLgFH;AM3FD;EACE,mBAAA;EACA,oCAAA;UAAA,4BAAA;EACA,UAAA;EACA,aAAA;EACA,gBAAA;EACA,YAAA;EACA,qCAAA;UAAA,6BAAA;CN6FD;AM3FD;EACE,gBAAA;CN6FD;AOvGD;EACE,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,0BAAA;MAAA,uBAAA;UAAA,oBAAA;EACA,iBAAA;EACA,0BAAA;MAAA,8BAAA;CPyGD;AOvGC;EACE,eAAA;CPyGH;AOvGC;EACE,mBAAA;CPyGH;AOrGG;EACE,eAAA;CPuGL;AOnGK;EACE,eAAA;CPqGP;AQzHD;EACE,cAAA;EACA,iBAAA;CR2HD;AQvHG;EACE,OAAA;CRyHL;AQvHC;EACE,mBAAA;EACA,SAAA;EACA,YAAA;EACA,sCAAA;EACA,yCAAA;EAAA,iCAAA;EACA,aAAA;CRyHH;AQvHG;EACE,mBAAA;EACA,YAAA;EACA,0BAAA;EACA,aAAA;EACA,kBAAA;CRyHL;AQvHC;EACE,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,6BAAA;EAAA,8BAAA;MAAA,2BAAA;UAAA,uBAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,wBAAA;EACA,YAAA;EACA,qBAAA;CRyHH;AQvHG;EACE,sBAAA;EACA,YAAA;EACA,gBAAA;EACA,4CAAA;EAAA,oCAAA;EACA,gBAAA;CRyHL;AQvHK;EACE,6BAAA;CRyHP","file":"main.css","sourcesContent":["// Common styles of the project\n@import 'rupture';\n\na\n  transition all .25s ease-in-out\n\n.bg-image\n  overflow hidden\n  position relative\n\n  & > img\n    fill-img()\n\np\n  font-family font-roboto\n  font-size 15px\n\n.logo-text\n  font-size 22px\n  color #e7505a\n  font-family font-forum\n\n.cbp-l-project-desc-text, .cbp-l-project-details-list > li, .cbp-l-project-details-list > li > strong\n  font-family font-alegreya\n\n.cbp-popup-content\n  .img-responsive\n    margin-top 50px\n    margin-left auto\n    margin-right auto\n\n.owl-carousel\n\n  .owl-stage\n    display flex\n    align-items center\n\n.c-content-client-logos-slider-1 .item img\n  max-width 200px\n  max-height 100px\n  object-fit contain\n","a {\n  transition: all 0.25s ease-in-out;\n}\n.bg-image {\n  overflow: hidden;\n  position: relative;\n}\n.bg-image > img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  object-fit: cover;\n  font-family: 'object-fit: cover';\n  width: 0;\n  min-width: 100%;\n  min-height: 100%;\n}\np {\n  font-family: 'Roboto', sans-serif;\n  font-size: 15px;\n}\n.logo-text {\n  font-size: 22px;\n  color: #e7505a;\n  font-family: 'Forum', cursive;\n}\n.cbp-l-project-desc-text,\n.cbp-l-project-details-list > li,\n.cbp-l-project-details-list > li > strong {\n  font-family: 'Alegreya Sans SC', sans-serif;\n}\n.cbp-popup-content .img-responsive {\n  margin-top: 50px;\n  margin-left: auto;\n  margin-right: auto;\n}\n.owl-carousel .owl-stage {\n  display: flex;\n  align-items: center;\n}\n.c-content-client-logos-slider-1 .item img {\n  max-width: 200px;\n  max-height: 100px;\n  object-fit: contain;\n}\n.cbp-l-filters-dropdownWrap {\n  width: 280px;\n}\n.custom-header {\n  background-color: #fff !important;\n}\n.custom-header .c-brand {\n  margin: 0;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.c-page-on-scroll .custom-header .c-brand {\n  height: 65px;\n  margin: 0 !important;\n}\n.custom-header .c-brand .c-desktop-logo {\n  display: block !important;\n}\n@media only screen and (max-width: 991px) {\n  .custom-header .c-brand {\n    height: 65px;\n  }\n}\n@media only screen and (max-width: 767px) {\n  .custom-header .c-brand {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n}\n.logo-custom {\n  height: 50px;\n  display: flex;\n  align-items: center;\n  font-family: 'Forum', cursive;\n  color: #e7505a;\n  font-size: 22px;\n}\n.logo-custom img {\n  max-width: 100%;\n  max-height: 100%;\n  margin-right: 10px;\n}\n.scroll-indicator {\n  position: absolute;\n  transform: translateX(-50%);\n  left: 50%;\n  bottom: 20px;\n  font-size: 40px;\n  color: #fff;\n  animation: pulse 1s infinite;\n}\n[data-scroll] {\n  cursor: pointer;\n}\n.about-material {\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n  justify-content: space-around;\n}\n.about-material img {\n  max-width: 40%;\n}\n.about-material p {\n  padding-left: 20px;\n}\n.about-material_big img {\n  max-width: 60%;\n}\n.about-material_medium img {\n  max-width: 50%;\n}\n.service {\n  height: 325px;\n  font-weight: 400;\n}\n.service:hover .service__description {\n  top: 0;\n}\n.service__description {\n  position: absolute;\n  top: 80%;\n  width: 100%;\n  background-color: rgba(231,80,90,0.7);\n  transition: top 0.5s ease-in-out;\n  height: 100%;\n}\n.service__description h2 {\n  text-align: center;\n  color: #fff;\n  text-transform: uppercase;\n  height: 45px;\n  line-height: 2.25;\n}\n.service__links {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 77%;\n  padding-bottom: 45px;\n}\n.service__links li {\n  list-style-type: none;\n  color: #fff;\n  font-size: 20px;\n  transition: color 0.25s ease-in-out;\n  cursor: pointer;\n}\n.service__links li:hover {\n  color: rgba(255,255,255,0.7);\n}\n","// Mixins.\n\nm-nl()\n  margin 0\n  padding 0\n  text-indent 0\n  list-style none\n  list-style-position outside\n\nm-cf()\n\n  &:before, &:after\n    display table\n    content \"\"\n\n  &:after\n    clear both\n\n  .lt-ie8 &\n      zoom 1\n\nm-blocks-justify()\n  text-align justify\n  text-justify newspaper\n\n// You can add your own mixins here:\n\nfill-img()\n  position absolute\n  top 0\n  left 0\n  right 0\n  bottom 0\n  margin auto\n  object-fit cover\n  font-family 'object-fit: cover'\n  width 0\n  min-width 100%\n  min-height 100%\n",".cbp-l-filters-dropdownWrap\n  width 280px\n",".custom-header\n  background-color #fff !important\r\n\r\n  .c-brand\r\n    margin 0\r\n    height 100px\r\n    display flex\r\n    align-items center\n    justify-content space-between\n\n    .c-page-on-scroll &\n      height 65px\n      margin 0 !important\n\n    .c-desktop-logo\n      display block !important\n\n    +below(991px)\n      height 65px\n\n    +below(767px)\n      padding-left 20px\n      padding-right 20px\n","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n",".logo-custom\n  height 50px\n  display flex\n  align-items center\n  font-family font-forum\n  color main-color\n  font-size 22px\n\n  img\n    max-width 100%\n    max-height 100%\n    margin-right 10px\n",".scroll-indicator\n  position absolute\n  transform translateX(-50%)\n  left 50%\n  bottom 20px\n  font-size 40px\n  color #fff\n  animation pulse 1s infinite\n\n[data-scroll]\n  cursor pointer\n",".about-material\n  display flex\n  align-items center\n  margin-top 25px\n  justify-content space-around\n\n  img\n    max-width 40%\n\n  p\n    padding-left 20px\n\n  &_big\n\n    img\n      max-width 60%\n\n  &_medium\n\n      img\n        max-width 50%\n",".service\n  height 325px\n  font-weight 400\n\n  &:hover\n\n    & ^[0]__description\n      top 0\n\n  &__description\n    position absolute\n    top 80%\n    width 100%\n    background-color rgba(main-color, .7)\n    transition top .5s ease-in-out\n    height 100%\n\n    h2\n      text-align center\n      color #fff\n      text-transform uppercase\n      height 45px\n      line-height 2.25\n\n  &__links\n    display flex\n    flex-direction column\n    justify-content center\n    height 77%\n    padding-bottom 45px\n\n    li\n      list-style-type none\n      color #fff\n      font-size 20px\n      transition color .25s ease-in-out\n      cursor pointer\n\n      &:hover\n        color rgba(#fff, .7)\n"]}